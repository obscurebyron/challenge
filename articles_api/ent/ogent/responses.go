// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/byronka/articles_challenge/ent"

func NewArticleCreate(e *ent.Article) *ArticleCreate {
	if e == nil {
		return nil
	}
	var ret ArticleCreate
	ret.ID = e.ID
	ret.Title = e.Title
	ret.Content = e.Content
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewArticleCreates(es []*ent.Article) []ArticleCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArticleCreate, len(es))
	for i, e := range es {
		r[i] = NewArticleCreate(e).Elem()
	}
	return r
}

func (a *ArticleCreate) Elem() ArticleCreate {
	if a == nil {
		return ArticleCreate{}
	}
	return *a
}

func NewArticleList(e *ent.Article) *ArticleList {
	if e == nil {
		return nil
	}
	var ret ArticleList
	ret.ID = e.ID
	ret.Title = e.Title
	ret.Content = e.Content
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewArticleLists(es []*ent.Article) []ArticleList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArticleList, len(es))
	for i, e := range es {
		r[i] = NewArticleList(e).Elem()
	}
	return r
}

func (a *ArticleList) Elem() ArticleList {
	if a == nil {
		return ArticleList{}
	}
	return *a
}

func NewArticleRead(e *ent.Article) *ArticleRead {
	if e == nil {
		return nil
	}
	var ret ArticleRead
	ret.ID = e.ID
	ret.Title = e.Title
	ret.Content = e.Content
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewArticleReads(es []*ent.Article) []ArticleRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArticleRead, len(es))
	for i, e := range es {
		r[i] = NewArticleRead(e).Elem()
	}
	return r
}

func (a *ArticleRead) Elem() ArticleRead {
	if a == nil {
		return ArticleRead{}
	}
	return *a
}

func NewArticleUpdate(e *ent.Article) *ArticleUpdate {
	if e == nil {
		return nil
	}
	var ret ArticleUpdate
	ret.ID = e.ID
	ret.Title = e.Title
	ret.Content = e.Content
	ret.CreatedAt = e.CreatedAt
	ret.UpdatedAt = e.UpdatedAt
	return &ret
}

func NewArticleUpdates(es []*ent.Article) []ArticleUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ArticleUpdate, len(es))
	for i, e := range es {
		r[i] = NewArticleUpdate(e).Elem()
	}
	return r
}

func (a *ArticleUpdate) Elem() ArticleUpdate {
	if a == nil {
		return ArticleUpdate{}
	}
	return *a
}
