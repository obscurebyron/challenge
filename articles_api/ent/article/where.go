// Code generated by ent, DO NOT EDIT.

package article

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/obscurebyron/challenge/auth_api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldTitle, v))
}

// Excerpt applies equality check predicate on the "excerpt" field. It's identical to ExcerptEQ.
func Excerpt(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldExcerpt, v))
}

// CoverImage applies equality check predicate on the "coverImage" field. It's identical to CoverImageEQ.
func CoverImage(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCoverImage, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldDate, v))
}

// AuthorName applies equality check predicate on the "author_name" field. It's identical to AuthorNameEQ.
func AuthorName(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldAuthorName, v))
}

// AuthorPictureURL applies equality check predicate on the "author_picture_url" field. It's identical to AuthorPictureURLEQ.
func AuthorPictureURL(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldAuthorPictureURL, v))
}

// OpenGraphImageURL applies equality check predicate on the "open_graph_image_url" field. It's identical to OpenGraphImageURLEQ.
func OpenGraphImageURL(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldOpenGraphImageURL, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldContent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldTitle, v))
}

// ExcerptEQ applies the EQ predicate on the "excerpt" field.
func ExcerptEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldExcerpt, v))
}

// ExcerptNEQ applies the NEQ predicate on the "excerpt" field.
func ExcerptNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldExcerpt, v))
}

// ExcerptIn applies the In predicate on the "excerpt" field.
func ExcerptIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldExcerpt, vs...))
}

// ExcerptNotIn applies the NotIn predicate on the "excerpt" field.
func ExcerptNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldExcerpt, vs...))
}

// ExcerptGT applies the GT predicate on the "excerpt" field.
func ExcerptGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldExcerpt, v))
}

// ExcerptGTE applies the GTE predicate on the "excerpt" field.
func ExcerptGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldExcerpt, v))
}

// ExcerptLT applies the LT predicate on the "excerpt" field.
func ExcerptLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldExcerpt, v))
}

// ExcerptLTE applies the LTE predicate on the "excerpt" field.
func ExcerptLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldExcerpt, v))
}

// ExcerptContains applies the Contains predicate on the "excerpt" field.
func ExcerptContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldExcerpt, v))
}

// ExcerptHasPrefix applies the HasPrefix predicate on the "excerpt" field.
func ExcerptHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldExcerpt, v))
}

// ExcerptHasSuffix applies the HasSuffix predicate on the "excerpt" field.
func ExcerptHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldExcerpt, v))
}

// ExcerptEqualFold applies the EqualFold predicate on the "excerpt" field.
func ExcerptEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldExcerpt, v))
}

// ExcerptContainsFold applies the ContainsFold predicate on the "excerpt" field.
func ExcerptContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldExcerpt, v))
}

// CoverImageEQ applies the EQ predicate on the "coverImage" field.
func CoverImageEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCoverImage, v))
}

// CoverImageNEQ applies the NEQ predicate on the "coverImage" field.
func CoverImageNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldCoverImage, v))
}

// CoverImageIn applies the In predicate on the "coverImage" field.
func CoverImageIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldCoverImage, vs...))
}

// CoverImageNotIn applies the NotIn predicate on the "coverImage" field.
func CoverImageNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldCoverImage, vs...))
}

// CoverImageGT applies the GT predicate on the "coverImage" field.
func CoverImageGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldCoverImage, v))
}

// CoverImageGTE applies the GTE predicate on the "coverImage" field.
func CoverImageGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldCoverImage, v))
}

// CoverImageLT applies the LT predicate on the "coverImage" field.
func CoverImageLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldCoverImage, v))
}

// CoverImageLTE applies the LTE predicate on the "coverImage" field.
func CoverImageLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldCoverImage, v))
}

// CoverImageContains applies the Contains predicate on the "coverImage" field.
func CoverImageContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldCoverImage, v))
}

// CoverImageHasPrefix applies the HasPrefix predicate on the "coverImage" field.
func CoverImageHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldCoverImage, v))
}

// CoverImageHasSuffix applies the HasSuffix predicate on the "coverImage" field.
func CoverImageHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldCoverImage, v))
}

// CoverImageEqualFold applies the EqualFold predicate on the "coverImage" field.
func CoverImageEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldCoverImage, v))
}

// CoverImageContainsFold applies the ContainsFold predicate on the "coverImage" field.
func CoverImageContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldCoverImage, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldDate, v))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldDate, v))
}

// AuthorNameEQ applies the EQ predicate on the "author_name" field.
func AuthorNameEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldAuthorName, v))
}

// AuthorNameNEQ applies the NEQ predicate on the "author_name" field.
func AuthorNameNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldAuthorName, v))
}

// AuthorNameIn applies the In predicate on the "author_name" field.
func AuthorNameIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldAuthorName, vs...))
}

// AuthorNameNotIn applies the NotIn predicate on the "author_name" field.
func AuthorNameNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldAuthorName, vs...))
}

// AuthorNameGT applies the GT predicate on the "author_name" field.
func AuthorNameGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldAuthorName, v))
}

// AuthorNameGTE applies the GTE predicate on the "author_name" field.
func AuthorNameGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldAuthorName, v))
}

// AuthorNameLT applies the LT predicate on the "author_name" field.
func AuthorNameLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldAuthorName, v))
}

// AuthorNameLTE applies the LTE predicate on the "author_name" field.
func AuthorNameLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldAuthorName, v))
}

// AuthorNameContains applies the Contains predicate on the "author_name" field.
func AuthorNameContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldAuthorName, v))
}

// AuthorNameHasPrefix applies the HasPrefix predicate on the "author_name" field.
func AuthorNameHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldAuthorName, v))
}

// AuthorNameHasSuffix applies the HasSuffix predicate on the "author_name" field.
func AuthorNameHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldAuthorName, v))
}

// AuthorNameEqualFold applies the EqualFold predicate on the "author_name" field.
func AuthorNameEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldAuthorName, v))
}

// AuthorNameContainsFold applies the ContainsFold predicate on the "author_name" field.
func AuthorNameContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldAuthorName, v))
}

// AuthorPictureURLEQ applies the EQ predicate on the "author_picture_url" field.
func AuthorPictureURLEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldAuthorPictureURL, v))
}

// AuthorPictureURLNEQ applies the NEQ predicate on the "author_picture_url" field.
func AuthorPictureURLNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldAuthorPictureURL, v))
}

// AuthorPictureURLIn applies the In predicate on the "author_picture_url" field.
func AuthorPictureURLIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldAuthorPictureURL, vs...))
}

// AuthorPictureURLNotIn applies the NotIn predicate on the "author_picture_url" field.
func AuthorPictureURLNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldAuthorPictureURL, vs...))
}

// AuthorPictureURLGT applies the GT predicate on the "author_picture_url" field.
func AuthorPictureURLGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldAuthorPictureURL, v))
}

// AuthorPictureURLGTE applies the GTE predicate on the "author_picture_url" field.
func AuthorPictureURLGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldAuthorPictureURL, v))
}

// AuthorPictureURLLT applies the LT predicate on the "author_picture_url" field.
func AuthorPictureURLLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldAuthorPictureURL, v))
}

// AuthorPictureURLLTE applies the LTE predicate on the "author_picture_url" field.
func AuthorPictureURLLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldAuthorPictureURL, v))
}

// AuthorPictureURLContains applies the Contains predicate on the "author_picture_url" field.
func AuthorPictureURLContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldAuthorPictureURL, v))
}

// AuthorPictureURLHasPrefix applies the HasPrefix predicate on the "author_picture_url" field.
func AuthorPictureURLHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldAuthorPictureURL, v))
}

// AuthorPictureURLHasSuffix applies the HasSuffix predicate on the "author_picture_url" field.
func AuthorPictureURLHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldAuthorPictureURL, v))
}

// AuthorPictureURLEqualFold applies the EqualFold predicate on the "author_picture_url" field.
func AuthorPictureURLEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldAuthorPictureURL, v))
}

// AuthorPictureURLContainsFold applies the ContainsFold predicate on the "author_picture_url" field.
func AuthorPictureURLContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldAuthorPictureURL, v))
}

// OpenGraphImageURLEQ applies the EQ predicate on the "open_graph_image_url" field.
func OpenGraphImageURLEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldOpenGraphImageURL, v))
}

// OpenGraphImageURLNEQ applies the NEQ predicate on the "open_graph_image_url" field.
func OpenGraphImageURLNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldOpenGraphImageURL, v))
}

// OpenGraphImageURLIn applies the In predicate on the "open_graph_image_url" field.
func OpenGraphImageURLIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldOpenGraphImageURL, vs...))
}

// OpenGraphImageURLNotIn applies the NotIn predicate on the "open_graph_image_url" field.
func OpenGraphImageURLNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldOpenGraphImageURL, vs...))
}

// OpenGraphImageURLGT applies the GT predicate on the "open_graph_image_url" field.
func OpenGraphImageURLGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldOpenGraphImageURL, v))
}

// OpenGraphImageURLGTE applies the GTE predicate on the "open_graph_image_url" field.
func OpenGraphImageURLGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldOpenGraphImageURL, v))
}

// OpenGraphImageURLLT applies the LT predicate on the "open_graph_image_url" field.
func OpenGraphImageURLLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldOpenGraphImageURL, v))
}

// OpenGraphImageURLLTE applies the LTE predicate on the "open_graph_image_url" field.
func OpenGraphImageURLLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldOpenGraphImageURL, v))
}

// OpenGraphImageURLContains applies the Contains predicate on the "open_graph_image_url" field.
func OpenGraphImageURLContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldOpenGraphImageURL, v))
}

// OpenGraphImageURLHasPrefix applies the HasPrefix predicate on the "open_graph_image_url" field.
func OpenGraphImageURLHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldOpenGraphImageURL, v))
}

// OpenGraphImageURLHasSuffix applies the HasSuffix predicate on the "open_graph_image_url" field.
func OpenGraphImageURLHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldOpenGraphImageURL, v))
}

// OpenGraphImageURLEqualFold applies the EqualFold predicate on the "open_graph_image_url" field.
func OpenGraphImageURLEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldOpenGraphImageURL, v))
}

// OpenGraphImageURLContainsFold applies the ContainsFold predicate on the "open_graph_image_url" field.
func OpenGraphImageURLContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldOpenGraphImageURL, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldContent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Article) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Article) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Article) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		p(s.Not())
	})
}
