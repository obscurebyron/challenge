// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/obscurebyron/challenge/auth_api/ent/article"
	"github.com/obscurebyron/challenge/auth_api/ent/predicate"
)

// ArticleUpdate is the builder for updating Article entities.
type ArticleUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleMutation
}

// Where appends a list predicates to the ArticleUpdate builder.
func (au *ArticleUpdate) Where(ps ...predicate.Article) *ArticleUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTitle sets the "title" field.
func (au *ArticleUpdate) SetTitle(s string) *ArticleUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetExcerpt sets the "excerpt" field.
func (au *ArticleUpdate) SetExcerpt(s string) *ArticleUpdate {
	au.mutation.SetExcerpt(s)
	return au
}

// SetCoverImage sets the "coverImage" field.
func (au *ArticleUpdate) SetCoverImage(s string) *ArticleUpdate {
	au.mutation.SetCoverImage(s)
	return au
}

// SetDate sets the "date" field.
func (au *ArticleUpdate) SetDate(s string) *ArticleUpdate {
	au.mutation.SetDate(s)
	return au
}

// SetAuthorName sets the "author_name" field.
func (au *ArticleUpdate) SetAuthorName(s string) *ArticleUpdate {
	au.mutation.SetAuthorName(s)
	return au
}

// SetAuthorPictureURL sets the "author_picture_url" field.
func (au *ArticleUpdate) SetAuthorPictureURL(s string) *ArticleUpdate {
	au.mutation.SetAuthorPictureURL(s)
	return au
}

// SetOpenGraphImageURL sets the "open_graph_image_url" field.
func (au *ArticleUpdate) SetOpenGraphImageURL(s string) *ArticleUpdate {
	au.mutation.SetOpenGraphImageURL(s)
	return au
}

// SetContent sets the "content" field.
func (au *ArticleUpdate) SetContent(s string) *ArticleUpdate {
	au.mutation.SetContent(s)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ArticleUpdate) SetUpdatedAt(t time.Time) *ArticleUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableUpdatedAt(t *time.Time) *ArticleUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// Mutation returns the ArticleMutation object of the builder.
func (au *ArticleUpdate) Mutation() *ArticleMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArticleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ArticleMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArticleUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArticleUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArticleUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ArticleUpdate) check() error {
	if v, ok := au.mutation.Title(); ok {
		if err := article.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Article.title": %w`, err)}
		}
	}
	if v, ok := au.mutation.Excerpt(); ok {
		if err := article.ExcerptValidator(v); err != nil {
			return &ValidationError{Name: "excerpt", err: fmt.Errorf(`ent: validator failed for field "Article.excerpt": %w`, err)}
		}
	}
	if v, ok := au.mutation.CoverImage(); ok {
		if err := article.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Article.coverImage": %w`, err)}
		}
	}
	if v, ok := au.mutation.Date(); ok {
		if err := article.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "Article.date": %w`, err)}
		}
	}
	if v, ok := au.mutation.AuthorName(); ok {
		if err := article.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "Article.author_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.AuthorPictureURL(); ok {
		if err := article.AuthorPictureURLValidator(v); err != nil {
			return &ValidationError{Name: "author_picture_url", err: fmt.Errorf(`ent: validator failed for field "Article.author_picture_url": %w`, err)}
		}
	}
	if v, ok := au.mutation.OpenGraphImageURL(); ok {
		if err := article.OpenGraphImageURLValidator(v); err != nil {
			return &ValidationError{Name: "open_graph_image_url", err: fmt.Errorf(`ent: validator failed for field "Article.open_graph_image_url": %w`, err)}
		}
	}
	if v, ok := au.mutation.Content(); ok {
		if err := article.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Article.content": %w`, err)}
		}
	}
	return nil
}

func (au *ArticleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(article.Table, article.Columns, sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(article.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.Excerpt(); ok {
		_spec.SetField(article.FieldExcerpt, field.TypeString, value)
	}
	if value, ok := au.mutation.CoverImage(); ok {
		_spec.SetField(article.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := au.mutation.Date(); ok {
		_spec.SetField(article.FieldDate, field.TypeString, value)
	}
	if value, ok := au.mutation.AuthorName(); ok {
		_spec.SetField(article.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := au.mutation.AuthorPictureURL(); ok {
		_spec.SetField(article.FieldAuthorPictureURL, field.TypeString, value)
	}
	if value, ok := au.mutation.OpenGraphImageURL(); ok {
		_spec.SetField(article.FieldOpenGraphImageURL, field.TypeString, value)
	}
	if value, ok := au.mutation.Content(); ok {
		_spec.SetField(article.FieldContent, field.TypeString, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(article.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArticleUpdateOne is the builder for updating a single Article entity.
type ArticleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleMutation
}

// SetTitle sets the "title" field.
func (auo *ArticleUpdateOne) SetTitle(s string) *ArticleUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetExcerpt sets the "excerpt" field.
func (auo *ArticleUpdateOne) SetExcerpt(s string) *ArticleUpdateOne {
	auo.mutation.SetExcerpt(s)
	return auo
}

// SetCoverImage sets the "coverImage" field.
func (auo *ArticleUpdateOne) SetCoverImage(s string) *ArticleUpdateOne {
	auo.mutation.SetCoverImage(s)
	return auo
}

// SetDate sets the "date" field.
func (auo *ArticleUpdateOne) SetDate(s string) *ArticleUpdateOne {
	auo.mutation.SetDate(s)
	return auo
}

// SetAuthorName sets the "author_name" field.
func (auo *ArticleUpdateOne) SetAuthorName(s string) *ArticleUpdateOne {
	auo.mutation.SetAuthorName(s)
	return auo
}

// SetAuthorPictureURL sets the "author_picture_url" field.
func (auo *ArticleUpdateOne) SetAuthorPictureURL(s string) *ArticleUpdateOne {
	auo.mutation.SetAuthorPictureURL(s)
	return auo
}

// SetOpenGraphImageURL sets the "open_graph_image_url" field.
func (auo *ArticleUpdateOne) SetOpenGraphImageURL(s string) *ArticleUpdateOne {
	auo.mutation.SetOpenGraphImageURL(s)
	return auo
}

// SetContent sets the "content" field.
func (auo *ArticleUpdateOne) SetContent(s string) *ArticleUpdateOne {
	auo.mutation.SetContent(s)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ArticleUpdateOne) SetUpdatedAt(t time.Time) *ArticleUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableUpdatedAt(t *time.Time) *ArticleUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// Mutation returns the ArticleMutation object of the builder.
func (auo *ArticleUpdateOne) Mutation() *ArticleMutation {
	return auo.mutation
}

// Where appends a list predicates to the ArticleUpdate builder.
func (auo *ArticleUpdateOne) Where(ps ...predicate.Article) *ArticleUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArticleUpdateOne) Select(field string, fields ...string) *ArticleUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Article entity.
func (auo *ArticleUpdateOne) Save(ctx context.Context) (*Article, error) {
	return withHooks[*Article, ArticleMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArticleUpdateOne) SaveX(ctx context.Context) *Article {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArticleUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArticleUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ArticleUpdateOne) check() error {
	if v, ok := auo.mutation.Title(); ok {
		if err := article.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Article.title": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Excerpt(); ok {
		if err := article.ExcerptValidator(v); err != nil {
			return &ValidationError{Name: "excerpt", err: fmt.Errorf(`ent: validator failed for field "Article.excerpt": %w`, err)}
		}
	}
	if v, ok := auo.mutation.CoverImage(); ok {
		if err := article.CoverImageValidator(v); err != nil {
			return &ValidationError{Name: "coverImage", err: fmt.Errorf(`ent: validator failed for field "Article.coverImage": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Date(); ok {
		if err := article.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "Article.date": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AuthorName(); ok {
		if err := article.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "Article.author_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AuthorPictureURL(); ok {
		if err := article.AuthorPictureURLValidator(v); err != nil {
			return &ValidationError{Name: "author_picture_url", err: fmt.Errorf(`ent: validator failed for field "Article.author_picture_url": %w`, err)}
		}
	}
	if v, ok := auo.mutation.OpenGraphImageURL(); ok {
		if err := article.OpenGraphImageURLValidator(v); err != nil {
			return &ValidationError{Name: "open_graph_image_url", err: fmt.Errorf(`ent: validator failed for field "Article.open_graph_image_url": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Content(); ok {
		if err := article.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Article.content": %w`, err)}
		}
	}
	return nil
}

func (auo *ArticleUpdateOne) sqlSave(ctx context.Context) (_node *Article, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(article.Table, article.Columns, sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Article.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, article.FieldID)
		for _, f := range fields {
			if !article.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != article.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(article.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Excerpt(); ok {
		_spec.SetField(article.FieldExcerpt, field.TypeString, value)
	}
	if value, ok := auo.mutation.CoverImage(); ok {
		_spec.SetField(article.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := auo.mutation.Date(); ok {
		_spec.SetField(article.FieldDate, field.TypeString, value)
	}
	if value, ok := auo.mutation.AuthorName(); ok {
		_spec.SetField(article.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := auo.mutation.AuthorPictureURL(); ok {
		_spec.SetField(article.FieldAuthorPictureURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.OpenGraphImageURL(); ok {
		_spec.SetField(article.FieldOpenGraphImageURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.Content(); ok {
		_spec.SetField(article.FieldContent, field.TypeString, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(article.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Article{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
